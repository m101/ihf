Specifications for IHF: I Hate Firewalls

http://www.jspipes.com/

1 - Introduction

IHF (I Hate Firewalls) is a project created in order to bypass very restrictive
firewalls that has only port 80 that is activated for instance.
Its goal would be to permit us to have an interactive shell.

2 - Features

- Client (cli)
    - polling results
- Server (srv)
    - pipe

3 - Architecture

(1) deamonized

-------     ----------------------
| cli | <-> |  -------    Tomcat |
-------     |  | srv |           |
            |  -------           |
            |  /\    fifo        |
            |   |     |          |
            |  fifo   \/         |
            | -----------        |
            | | deamon  |        |
            | -----------        |
            |  /\    fifo        |
            |   |     |          |
            |  fifo   \/         |
            | -----------        |
            | | spawned |        |
            | | process |        |
            | -----------        |
            ----------------------

(2) fifo only

-------     ----------------------
| cli | <-> |  -------    Tomcat |
-------     |  | srv |           |
            |  -------           |
            |  /\    fifo        |
            |   |     |          |
            |   |     |          |
            |  fifo   \/         |
            | -----------        |
            | | spawned |        |
            | | process |        |
            | -----------        |
            ----------------------

(3) fifo only with C program

-------     ----------------------
| cli | <-> |  -------    Tomcat |
-------     |  | srv |           |
            |  -------           |
            |    /\              |
            |    |  pipe         |
            |    |               |
            | -----------        |
            | | C code  |        |
            | -----------        |
            |  /\    fifo        |
            |   |     |          |
            |   |     |          |
            |  fifo   \/         |
            | -----------        |
            | | spawned |        |
            | | process |        |
            | -----------        |
            ----------------------

4 - Thread safety / Sessions

Multiple clients have to be taken into account in the implementation as
otherwise there will have corruption and other problems.
The solution for the software to be thread-safe would be the usage of
sessions.

The client could either submit fifo file prefix in INIT but it means
that the session handling will have to be implemented in the software.

There is a second approach where the server part use JSESSID or PHPSESSID
to generate a hash of 64-bits (at least) which would serve as a prefix.
The advantage of this approach is that the session management will mostly be
done by the JSP server and a part on the client (which would keep the JSESSID
as it is done on web browsers).

Since multiple files will be created, a TTL (Time To Live) in seconds
on the last accessed date would need to be specified in order to clean the
fifos correctly.

Moreover, hashing the ip+port would not work since srcport change for each
connection. IP hashing would not work in the case where multiple clients share
the same connection (and thus have the same IP).
